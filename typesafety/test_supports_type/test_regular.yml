- case: typeclass_supports_type
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int) -> str:
        return str(instance)

    @to_json.instance(str)
    def _to_json_str(instance: str) -> str:
        return instance

    def convert_to_json(instance: Supports[ToJson]) -> str:
       return to_json(instance)

    convert_to_json(1)
    convert_to_json('a')
    convert_to_json(None)  # E: Argument 1 to "convert_to_json" has incompatible type "None"; expected "Supports[ToJson]"  [arg-type]


- case: typeclass_supports_type_restriction
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance: Supports[ToJson]) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int) -> str:
        return str(instance)

    to_json(1)


- case: typeclass_supports_callback
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType
    from typing import Callable

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int) -> str:
        return str(instance)

    @to_json.instance(str)
    def _to_json_str(instance: str) -> str:
        return instance

    def convert_to_json(
        callback: Callable[[Supports[ToJson]], str],
        instance: Supports[ToJson],
    ) -> str:
        return callback(instance)

    convert_to_json(to_json, 1)
    convert_to_json(to_json, 'a')
    convert_to_json(to_json, None)  # E: Argument 2 to "convert_to_json" has incompatible type "None"; expected "Supports[ToJson]"  [arg-type]


- case: typeclass_supports_with_function
  disable_cache: false
  main: |
    from classes import typeclass, Supports

    @typeclass
    def to_json(instance) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int) -> str:
        return str(instance)

    @to_json.instance(str)
    def _to_json_str(instance: str) -> str:
        return instance

    def convert_to_json(instance: Supports[to_json]) -> str:
       ...
  out: |
    main:15: error: Function "main.to_json" is not valid as a type  [valid-type]
    main:15: note: Perhaps you need "Callable[...]" or a callback protocol?


- case: typeclass_supports_other
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    class Other(AssociatedType):
        ...

    def convert_to_json(instance: Supports[Other]) -> str:
        return to_json(instance)
  out: |
    main:14: error: Argument 1 to "to_json" has incompatible type "Supports[Other]"; expected "Supports[ToJson]"  [arg-type]


- case: supports_annotation
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int) -> str:
        return str(instance)

    a: Supports[ToJson] = 1
    b: Supports[ToJson] = 'a'  # E: Incompatible types in assignment (expression has type "str", variable has type "Supports[ToJson]")  [assignment]


- case: supports_type_bound
  disable_cache: false
  main: |
    from classes import Supports, AssociatedType

    a: Supports[int]  # E: Type argument "builtins.int" of "Supports" must be a subtype of "classes._typeclass.AssociatedType"  [misc]

    class A(AssociatedType):
        ...

    b: Supports[A, int]  # E: Type argument "builtins.int" of "Supports" must be a subtype of "classes._typeclass.AssociatedType"  [misc]


- case: supports_multiple_types
  disable_cache: false
  main: |
    from classes import AssociatedType, Supports, typeclass

    class A(AssociatedType):
        ...

    class B(AssociatedType):
        ...

    @typeclass(A)
    def one(instance) -> bool:
        ...

    @one.instance(int)
    def _one_int(instance: int) -> bool:
        ...

    @typeclass(B)
    def two(instance) -> bool:
        ...

    @two.instance(int)
    def _two_int(instance: int) -> bool:
        ...

    a: Supports[A] = 1
    b: Supports[B] = 1
    ab: Supports[A, B] = 1


- case: supports_multiple_types_callback
  disable_cache: false
  main: |
    from classes import AssociatedType, Supports, typeclass

    class ToJson(AssociatedType):
        ...

    class FromJson(AssociatedType):
        ...

    class Other(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    @typeclass(FromJson)
    def from_json(instance) -> str:
        ...

    @typeclass(Other)
    def other(instance) -> str:
        ...

    @to_json.instance(str)
    def _to_json_str(instance: str) -> str:
        ...

    @from_json.instance(str)
    def _from_json_str(instance: str) -> str:
        ...

    @other.instance(str)
    def _other_json_str(instance: str) -> str:
        ...

    def func(instance: Supports[ToJson, FromJson]) -> Supports[ToJson, FromJson]:
        return from_json(to_json(instance))

    func('abc')


- case: supports_multiple_error_handling_in_mro
  disable_cache: false
  main: |
    from classes import AssociatedType, Supports, typeclass

    class ToJson(AssociatedType):
        ...

    class FromJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance) -> str:
        ...

    @typeclass(FromJson)
    def from_json(instance) -> str:
        ...

    @to_json.instance(str)
    def _to_json_str(instance: str) -> str:
        ...

    @from_json.instance(str)
    def _from_json_str(instance: str, other) -> str:  # error
        ...

    a: Supports[ToJson] = 'a'
    b: Supports[FromJson] = 'a'  # error
  out: |
    main:21: error: Instance callback is incompatible "def (instance: builtins.str, other: Any) -> builtins.str"; expected "def (instance: builtins.str) -> builtins.str"  [misc]
    main:26: error: Incompatible types in assignment (expression has type "str", variable has type "Supports[FromJson]")  [assignment]
