- case: supports_generic_correct1
  disable_cache: false
  main: |
    from typing import Iterable, List, Set, TypeVar, Union
    from classes import AssociatedType, Supports, typeclass

    X = TypeVar('X')

    class Some(AssociatedType[X]):
        ...

    @typeclass(Some)
    def some(instance: Iterable[X]) -> X:
        ...

    @some.instance(list)
    @some.instance(set)
    def _some_ex(instance: Union[List[X], Set[X]]) -> X:
        ...

    x: Supports[Some[int]] = [1, 2, 3]
    y = {1, 2, 3}
    reveal_type(some(x))  # N: Revealed type is "builtins.int"
    reveal_type(some(y))  # N: Revealed type is "builtins.int"


- case: supports_generic_correct2
  disable_cache: False
  skip: sys.version_info[:2] < (3, 8)
  main: |
    from typing import TypeVar, Union, Mapping, Dict
    from classes import AssociatedType, Supports, typeclass

    X = TypeVar('X')
    Y = TypeVar('Y')

    class Some(AssociatedType[X, Y]):
        ...

    @typeclass(Some)
    def some(instance: Mapping[X, Y], a: X, b: Y) -> Y:
        ...

    @some.instance(dict)
    def _some_ex(instance: Dict[X, Y], a: X, b: Y) -> Y:
        ...

    x: Supports[Some[int, str]] = {1: 'a'}

    reveal_type(some(x, 1, 'a'))  # N: Revealed type is "builtins.str"
    reveal_type(some({'a': 1}, 'a', 1))  # N: Revealed type is "builtins.int"


- case: supports_generic_wrong1
  disable_cache: false
  main: |
    from typing import Iterable, List, TypeVar
    from classes import AssociatedType, Supports, typeclass

    X = TypeVar('X')

    class Some(AssociatedType[X]):
        ...

    @typeclass(Some)
    def some(instance: Iterable[X]) -> X:
        ...

    @some.instance(list)
    def _some_ex(instance: List[X]) -> X:
        ...

    x: Supports[Some[int]] = {1, 2, 3}
    some({1, 2, 3})
  out: |
    main:17: error: Incompatible types in assignment (expression has type "Set[int]", variable has type "Supports[Some[int]]")  [assignment]
    main:18: error: Argument 1 to "some" has incompatible type "Set[int]"; expected "Supports[Some[<nothing>]]"  [arg-type]


- case: supports_generic_wrong2
  disable_cache: false
  main: |
    from typing import Iterable, List, Set, TypeVar, Union
    from classes import AssociatedType, Supports, typeclass

    X = TypeVar('X')

    class Some(AssociatedType[X]):
        ...

    @typeclass(Some)
    def some(instance: Iterable[X]) -> X:
        ...

    @typeclass
    def other(instance: Iterable[X]) -> X:
        ...

    @other.instance(list)
    @some.instance(set)
    def _some_ex(instance: Union[List[X], Set[X]]) -> X:
        ...

    x: Supports[Some[int]] = [1, 2, 3]
    y: Supports[Some[int]] = {1, 2, 3}
    z: Supports[Some[int]] = 1
  out: |
    main:17: error: Found different typeclass ".instance" calls, use only "main.some"  [misc]
    main:17: error: Instance "Union[builtins.list[X`-1], builtins.set[X`-1]]" does not match inferred type "builtins.set[_T`1]"  [misc]
    main:22: error: Incompatible types in assignment (expression has type "List[int]", variable has type "Supports[Some[int]]")  [assignment]
    main:23: error: Incompatible types in assignment (expression has type "Set[int]", variable has type "Supports[Some[int]]")  [assignment]
    main:24: error: Incompatible types in assignment (expression has type "int", variable has type "Supports[Some[int]]")  [assignment]


- case: supports_multiple_one_generic_one_regular
  disable_cache: false
  main: |
    from classes import AssociatedType, Supports, typeclass
    from typing import TypeVar, Iterable, List

    T = TypeVar('T')

    class Some(AssociatedType[T]):
        ...

    class FromJson(AssociatedType):
        ...

    @typeclass(Some)
    def some(instance: Iterable[T]) -> T:
        ...

    @typeclass(FromJson)
    def from_json(instance) -> str:
        ...

    @some.instance(list)
    def _some_str(instance: List[T]) -> T:
        ...

    @from_json.instance(str)
    def _from_json_str(instance: str) -> str:
        ...

    a: Supports[Some[str], FromJson]
    reveal_type(some(a))  # N: Revealed type is "builtins.str*"


    - case: supports_multiple_two_generics
  disable_cache: false
  main: |
    from classes import AssociatedType, Supports, typeclass
    from typing import TypeVar, Iterable, List

    T = TypeVar('T')

    class Some(AssociatedType[T]):
        ...

    class Other(AssociatedType[T]):
        ...

    @typeclass(Some)
    def some(instance: Iterable[T]) -> T:
        ...

    @typeclass(Other)
    def other(instance: Iterable[T]) -> T:
        ...

    @some.instance(list)
    def _some_list(instance: List[T]) -> T:
        ...

    @other.instance(list)
    def _other_list(instance: List[T]) -> T:
        ...

    a: Supports[Some[str], Other[int]]
    reveal_type(some(a))  # N: Revealed type is "builtins.str"
    reveal_type(other(a))  # N: Revealed type is "builtins.int"
