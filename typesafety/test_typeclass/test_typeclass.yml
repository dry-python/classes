- case: typeclass_definition
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str, other: int, *, attr: bool) -> bool:
        ...

    reveal_type(example)  # N: Revealed type is 'classes._typeclass._TypeClass[<nothing>, builtins.bool, def (instance: <nothing>, arg: builtins.str, other: builtins.int, *, attr: builtins.bool) -> builtins.bool, <nothing>]'


- case: typeclass_definition_wrong
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance):
        ...


- case: typeclass_wrong_param
  disable_cache: false
  main: |
    from classes import typeclass

    typeclass(1)

  out: |
    main:3: error: Value of type variable "_CallbackType" of "typeclass" cannot be "int"


- case: typeclass_instance
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str) -> bool:
        ...

    @example.instance(str)
    def _example_str(instance: str, arg: str) -> bool:
        ...

    reveal_type(example)  # N: Revealed type is 'classes._typeclass._TypeClass[builtins.str*, builtins.bool, def (builtins.str*, arg: builtins.str) -> builtins.bool, <nothing>]'


- case: typeclass_instance_union
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str) -> bool:
        ...

    @example.instance(int)
    @example.instance(float)
    def _example_int_float(instance, arg: str) -> bool:
        ...

    @example.instance(str)
    def _example_str(instance: str, arg: str) -> bool:
        ...

    reveal_type(example)  # N: Revealed type is 'classes._typeclass._TypeClass[Union[builtins.str*, builtins.int*, builtins.float*], builtins.bool, def (builtins.str*, arg: builtins.str) -> builtins.bool, <nothing>]'


- case: typeclass_incorrect_instance_callback1
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str) -> bool:
        ...

    @example.instance(int)
    def _example_int(instance: str, arg: str) -> bool:
        ...

    reveal_type(example)
  out: |
    main:7: error: Argument 1 has incompatible type "Callable[[str, str], bool]"; expected "Callable[[int, str], bool]"
    main:11: note: Revealed type is 'classes._typeclass._TypeClass[builtins.int*, builtins.bool, def (builtins.int*, arg: builtins.str) -> builtins.bool, <nothing>]'


- case: typeclass_incorrect_instance_callback2
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str) -> bool:
        ...

    @example.instance(int)
    def _example_int(instance: int) -> bool:
        ...

    reveal_type(example)
  out: |
    main:7: error: Argument 1 has incompatible type "Callable[[int], bool]"; expected "Callable[[int, str], bool]"
    main:11: note: Revealed type is 'classes._typeclass._TypeClass[builtins.int*, builtins.bool, def (builtins.int*, arg: builtins.str) -> builtins.bool, <nothing>]'


- case: typeclass_incorrect_instance_callback3
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance, arg: str) -> bool:
        ...

    @example.instance(int)
    def _example_int(instance, arg: int) -> bool:
        ...

    reveal_type(example)
  out: |
    main:7: error: Argument 1 has incompatible type "Callable[[Any, int], bool]"; expected "Callable[[int, str], bool]"
    main:11: note: Revealed type is 'classes._typeclass._TypeClass[builtins.int*, builtins.bool, def (builtins.int*, arg: builtins.str) -> builtins.bool, <nothing>]'
