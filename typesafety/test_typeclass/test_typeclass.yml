- case: typeclass_definition_any
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def example(instance):
        ...


- case: typeclass_definied_by_type
  disable_cache: false
  main: |
    from classes import typeclass, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance, verbose: bool = False) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: int, verbose: bool = False) -> str:
        return str(instance)

    @to_json.instance(str)
    def _to_json_str(instance: str, verbose: bool = False) -> str:
        return instance

    to_json(1, verbose=True)
    to_json('a')
    to_json(None)
  out: |
    main:20: error: Argument 1 to "to_json" has incompatible type "None"; expected "Supports[ToJson]"  [arg-type]


- case: typeclass_class_wrong_sig
  disable_cache: false
  main: |
    from classes import typeclass, AssociatedType

    class ToJson(AssociatedType):
        ...

    @typeclass(ToJson)
    def to_json(instance, verbose: bool = False) -> str:
        ...

    @to_json.instance(int)
    def _to_json_int(instance: str) -> int:
        ...
  out: |
    main:10: error: Instance callback is incompatible "def (instance: builtins.str) -> builtins.int"; expected "def (instance: builtins.str, verbose: builtins.bool =) -> builtins.str"  [misc]
    main:10: error: Instance "builtins.str" does not match inferred type "builtins.int"  [misc]


- case: typeclass_definied_by_literal
  disable_cache: false
  main: |
    from classes import typeclass

    typeclass(1)
  out: |
    main:3: error: No overload variant of "typeclass" matches argument type "int"  [call-overload]
    main:3: note: Possible overload variants:
    main:3: note:     def [_AssociatedType] typeclass(definition: Type[_AssociatedType]) -> _TypeClassDef[_AssociatedType]
    main:3: note:     def [_SignatureType, _InstanceType, _AssociatedType, _Fullname <: str] typeclass(signature: _SignatureType) -> _TypeClass[_InstanceType, _SignatureType, _AssociatedType, _Fullname]


- case: typeclass_non_global_declaration
  disable_cache: false
  main: |
    from classes import typeclass

    def some():
        @typeclass
        def a(instance) -> str:
            ...

        @a.instance(int)
        def _a_int(instance: int) -> str:
            ...

        reveal_type(_a_int)
  out: |
    main:8: error: Typeclass cannot be loaded, it must be a global declaration  [misc]
    main:12: note: Revealed type is "Any"
