- case: typeclass_generic_definition_free_typevar
  disable_cache: false
  main: |
    from typing import List, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> X:  # type: ignore[type-var]
        ...

    @some.instance(list)
    def _some_ex(instance: List[X], b: int) -> X:
        return instance[b]  # We need this line to test inner inference

    reveal_type(some(['a', 'b'], 0))  # N: Revealed type is "builtins.str"
    reveal_type(some([1, 2, 3], 0))  # N: Revealed type is "builtins.int"


- case: typeclass_generic_definition_restriction_correct
  disable_cache: false
  main: |
    from typing import Iterable, List, TypeVar, Tuple
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance: Iterable[X], b: int) -> X:
        ...

    @some.instance(list)
    def _some_list(instance: List[X], b: int) -> X:
        return instance[b]  # We need this line to test inner inference

    @some.instance(tuple)
    def _some_tuple(instance: Tuple[X, ...], b: int) -> X:
        return instance[b]  # We need this line to test inner inference

    reveal_type(some(['a', 'b'], 0))  # N: Revealed type is "builtins.str"
    reveal_type(some([1, 2, 3], 0))  # N: Revealed type is "builtins.int"

    reveal_type(some((1, 2, 3), 0))  # N: Revealed type is "builtins.int"
    reveal_type(some((1, 2), 0))  # N: Revealed type is "builtins.int"


- case: typeclass_generic_definition_restriction_wrong
  disable_cache: false
  main: |
    from typing import Generic, List, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    class Some(Generic[X]):
        ...

    @typeclass
    def some(instance: Some[X], b: int) -> X:
        ...

    @some.instance(list)
    def _some_ex(instance: List[X], b: int) -> X:
        return instance[b]  # We need this line to test inner inference
  out: |
    main:13: error: Instance "builtins.list[X`-1]" does not match original type "main.Some[X`-1]"  [misc]


- case: typeclass_generic_definition_any1
  disable_cache: false
  mypy_config: |
    disallow_any_explicit = false
    disallow_any_generics = false
  main: |
    from typing import Iterable, List, TypeVar, Any
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> int:
        ...

    @some.instance(list)
    def _some_ex(instance: List[Any], b: int) -> int:
        ...


- case: typeclass_generic_definition_any2
  disable_cache: false
  mypy_config: |
    disallow_any_explicit = false
    disallow_any_generics = false
  main: |
    from typing import Iterable, List, TypeVar, Any
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> int:
        ...

    @some.instance(List[Any])
    def _some_ex(instance: list, b: int) -> int:
        ...
  out: |
    main:10: error: Instance "builtins.list[Any]" has concrete generic type, it is not supported during runtime  [misc]


- case: typeclass_generic_definition_unbound
  disable_cache: false
  main: |
    from typing import Iterable, List, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> X:
        ...

    @some.instance(List[X])
    def _some_ex(instance: List[X], b: int) -> X:
        return instance[b]  # We need this line to test inner inference
  out: |
    main:7: error: A function returning TypeVar should receive at least one argument containing the same TypeVar  [type-var]
    main:10: error: Runtime type "builtins.list[X?]" has unbound type, use implicit any  [misc]
    main:10: error: Type variable "main.X" is unbound  [valid-type]
    main:10: note: (Hint: Use "Generic[X]" or "Protocol[X]" base class to bind "X" inside a class)
    main:10: note: (Hint: Use "X" in function signature to bind "X" inside a function)


- case: typeclass_generic_definition_concrete1
  disable_cache: false
  main: |
    from typing import Iterable, List, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> X:
        ...

    @some.instance(list)
    def _some_ex(instance: List[int], b: int) -> X:
        return instance[b]  # We need this line to test inner inference
  out: |
    main:7: error: A function returning TypeVar should receive at least one argument containing the same TypeVar  [type-var]
    main:10: error: Instance "builtins.list[builtins.int]" has concrete generic type, it is not supported during runtime  [misc]
    main:11: error: A function returning TypeVar should receive at least one argument containing the same TypeVar  [type-var]
    main:12: error: Incompatible return value type (got "int", expected "X")  [return-value]


- case: typeclass_generic_definition_concrete2
  disable_cache: false
  main: |
    from typing import Iterable, List, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance, b: int) -> X:
        ...

    @some.instance(List[int])
    def _some_ex(instance: List[X], b: int) -> X:
        return instance[b]  # We need this line to test inner inference
  out: |
    main:7: error: A function returning TypeVar should receive at least one argument containing the same TypeVar  [type-var]
    main:10: error: Instance "builtins.list[builtins.int]" has concrete generic type, it is not supported during runtime  [misc]


- case: typeclass_generic_call_union1
  disable_cache: false
  main: |
    from typing import Union, Iterable, List, Set, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def copy(instance: Iterable[X]) -> X:
        ...

    @copy.instance(list)
    def _copy_int(instance: List[X]) -> X:
        ...

    @copy.instance(set)
    def _copy_str(instance: Set[X]) -> X:
        ...

    a: Union[Set[str], List[str]]

    reveal_type(copy(a))
  out: |
    main:20: note: Revealed type is "builtins.str"


- case: typeclass_generic_call_union2
  disable_cache: false
  main: |
    from typing import TypeVar, Union, Iterable, List, Set
    from classes import typeclass, AssociatedType, Supports

    X = TypeVar('X')

    class Copy(AssociatedType[X]):
        ...

    @typeclass(Copy)
    def copy(instance: Iterable[X]) -> X:
        ...

    @copy.instance(list)
    def _copy_int(instance: List[X]) -> X:
        ...

    @copy.instance(set)
    def _copy_str(instance: Set[X]) -> X:
        ...

    a: Union[Set[str], List[str]]

    reveal_type(copy(a))
  out: |
    main:23: note: Revealed type is "builtins.str"


- case: typeclass_generic_call_union3
  disable_cache: false
  main: |
    from typing import TypeVar, Union, Iterable, List, Set
    from classes import typeclass, AssociatedType, Supports

    X = TypeVar('X')

    class Copy(AssociatedType):  # NOTE: no typevar
        ...

    @typeclass(Copy)
    def copy(instance: Iterable[X]) -> X:
        ...

    @copy.instance(list)
    def _copy_int(instance: List[X]) -> X:
        ...

    @copy.instance(set)
    def _copy_str(instance: Set[X]) -> X:
        ...

    a: Union[Set[str], List[str]]

    reveal_type(copy(a))
  out: |
    main:9: error: Generic type "main.Copy" with "0" type arguments does not match generic instance declaration "typing.Iterable[X`-1]" with "1" type arguments  [misc]
    main:23: note: Revealed type is "<nothing>"


- case: typeclass_generic_tuple
  disable_cache: false
  main: |
    from typing import Iterable, Tuple, TypeVar
    from classes import typeclass

    X = TypeVar('X')

    @typeclass
    def some(instance: Iterable[X]) -> X:
        ...

    @some.instance(tuple)
    def _some_tuple(instance: Tuple[X, X]) -> X:
        ...
  out: |
    main:10: error: Instance "Tuple[X`-1, X`-1]" has concrete generic type, it is not supported during runtime  [misc]


- case: typeclass_regression259_mutated_signature
  disable_cache: false
  main: |
    from abc import ABCMeta, abstractmethod
    from classes import typeclass

    @typeclass
    def my_typeclass(instance) -> int:
        ...

    class _MyABC(object, metaclass=ABCMeta):
        ...

    class _MyConcrete(_MyABC):
        ...

    @my_typeclass.instance(_MyABC)
    def _my_abc(instance: _MyABC) -> int:
        ...

    my_typeclass(_MyConcrete())

    @my_typeclass.instance(int)
    def _my_int(instance: int) -> int:
        ...
