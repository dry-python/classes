- case: typeclass_typed_dict1
  disable_cache: false
  skip: sys.version_info[:2] > (3, 8)
  main: |
    from classes import typeclass, AssociatedType, Supports
    from typing_extensions import TypedDict

    class User(TypedDict):
        name: str
        registered: bool

    class UserDictMeta(type):
        def __instancecheck__(cls, arg: object) -> bool:
            return (
                isinstance(arg, dict) and
                isinstance(arg.get('name'), str) and
                isinstance(arg.get('registered'), bool)
            )

    UserMeta = type('UserMeta', (UserDictMeta, type(TypedDict)), {})

    class UserDict(User, metaclass=UserMeta):  # type: ignore[misc]
        ...

    class GetName(AssociatedType):
        ...

    @typeclass(GetName)
    def get_name(instance) -> str:
        ...

    @get_name.instance(delegate=UserDict)
    def _get_name_user_dict(instance: UserDict) -> str:
        return instance['name']

    def callback(instance: Supports[GetName]) -> str:
        return get_name(instance)

    a: UserDict = {'name': 'sobolevn', 'registered': True}
    b: User = {'name': 'sobolevn', 'registered': True}
    c = {'name': 'sobolevn', 'registered': True}

    callback(a)  # ok
    callback(b)
    callback(c)
    callback({})
  out: |
    main:40: error: Argument 1 to "callback" has incompatible type "User"; expected "Supports[GetName]"  [arg-type]
    main:41: error: Argument 1 to "callback" has incompatible type "Dict[str, object]"; expected "Supports[GetName]"  [arg-type]
    main:42: error: Argument 1 to "callback" has incompatible type "Dict[<nothing>, <nothing>]"; expected "Supports[GetName]"  [arg-type]


- case: typeclass_typed_dict2
  disable_cache: false
  skip: sys.version_info[:2] > (3, 8)
  main: |
    from classes import typeclass
    from typing_extensions import TypedDict

    class User(TypedDict):
        name: str
        registered: bool

    class UserDictMeta(type):
        def __instancecheck__(cls, arg: object) -> bool:
            return (
                isinstance(arg, dict) and
                isinstance(arg.get('name'), str) and
                isinstance(arg.get('registered'), bool)
            )

    UserMeta = type('UserMeta', (UserDictMeta, type(TypedDict)), {})

    class UserDict(User, metaclass=UserMeta):  # type: ignore[misc]
        ...

    @typeclass
    def get_name(instance) -> str:
        ...

    @get_name.instance(delegate=UserDict)
    def _get_name_user_dict(instance: User) -> str:
        return instance['name']
  out: |
    main:25: error: Instance "TypedDict('main.User', {'name': builtins.str, 'registered': builtins.bool})" does not match inferred type "main.UserDict"


- case: typeclass_typed_dict3
  disable_cache: false
  skip: sys.version_info[:2] > (3, 8)
  main: |
    from classes import typeclass
    from typing_extensions import TypedDict

    class User(TypedDict):
        name: str
        registered: bool

    class Other(TypedDict):  # even has the same structure
        name: str
        registered: bool

    class UserDictMeta(type):
        def __instancecheck__(cls, arg: object) -> bool:
            return (
                isinstance(arg, dict) and
                isinstance(arg.get('name'), str) and
                isinstance(arg.get('registered'), bool)
            )

    UserMeta = type('UserMeta', (UserDictMeta, type(TypedDict)), {})

    class UserDict(User, metaclass=UserMeta):  # type: ignore [misc]
        ...

    @typeclass
    def get_name(instance) -> str:
        ...

    @get_name.instance(delegate=UserDict)
    def _get_name_user_dict(instance: Other) -> str:
        return instance['name']
  out: |
    main:29: error: Instance "TypedDict('main.Other', {'name': builtins.str, 'registered': builtins.bool})" does not match inferred type "main.UserDict"
