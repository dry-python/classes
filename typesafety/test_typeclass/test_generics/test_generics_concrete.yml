- case: typeclass_concrete_generic
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(List[int]):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: List[int]) -> int:
        ...

    some([1, 2, 3])
    some([])
    some(['a'])  # E: List item 0 has incompatible type "str"; expected "int"


- case: typeclass_concrete_generic_annotated_as_delegate
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(List[int]):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: SomeDelegate) -> int:
        ...

    a: SomeDelegate
    some(a)
    some([1, 2, 3])
    some([])
    some(['a'])
  out: |
    main:17: error: Argument 1 to "some" has incompatible type "List[int]"; expected "SomeDelegate"
    main:18: error: Argument 1 to "some" has incompatible type "List[<nothing>]"; expected "SomeDelegate"
    main:19: error: Argument 1 to "some" has incompatible type "List[str]"; expected "SomeDelegate"


- case: typeclass_delegate_not_subtype_correct1
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: List[int]) -> int:
        ...
  out: |
    main:11: error: Instance "builtins.list[builtins.int]" does not match inferred type "main.SomeDelegate"


- case: typeclass_delegate_not_subtype_correct2
  disable_cache: false
  main: |
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_int(instance: int) -> int:
        ...
  out: |
    main:10: error: Instance "builtins.int" does not match inferred type "main.SomeDelegate"


- case: typeclass_concrete_generic_supports_delegate
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType
    from typing import List

    class ListOfIntMeta(type):
        def __instancecheck__(cls, arg) -> bool:
            return (
                isinstance(arg, list) and
                bool(arg) and
                all(isinstance(list_item, int) for list_item in arg)
            )

    class ListOfInt(List[int], metaclass=ListOfIntMeta):
        ...

    class A(AssociatedType):
        ...

    @typeclass(A)
    def sum_all(instance) -> int:
        ...

    @sum_all.instance(delegate=ListOfInt)
    def _sum_all_list_int(instance: ListOfInt) -> int:
        return sum(instance)

    def test(a: Supports[A]):
        ...

    a: ListOfInt
    b: List[int]
    c: List[str]
    test(a)
    test(b)
    test(c)
  out: |
    main:33: error: Argument 1 to "test" has incompatible type "List[int]"; expected "Supports[A]"
    main:34: error: Argument 1 to "test" has incompatible type "List[str]"; expected "Supports[A]"


- case: typeclass_concrete_generic_supports_instance
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType
    from typing import List

    class ListOfIntMeta(type):
        def __instancecheck__(cls, arg) -> bool:
            return (
                isinstance(arg, list) and
                bool(arg) and
                all(isinstance(list_item, int) for list_item in arg)
            )

    class ListOfInt(List[int], metaclass=ListOfIntMeta):
        ...

    class A(AssociatedType):
        ...

    @typeclass(A)
    def sum_all(instance) -> int:
        ...

    @sum_all.instance(delegate=ListOfInt)
    def _sum_all_list_int(instance: List[int]) -> int:
        return sum(instance)

    def test(a: Supports[A]):
        ...

    a: ListOfInt
    b: List[int]
    c: List[str]
    test(a)
    test(b)
    test(c)
  out: |
    main:33: error: Argument 1 to "test" has incompatible type "List[int]"; expected "Supports[A]"
    main:34: error: Argument 1 to "test" has incompatible type "List[str]"; expected "Supports[A]"


- case: typeclass_concrete_generic_delegate_and_protocol
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(List[int], delegate=SomeDelegate, protocol=str)
    def _some_list_int(instance: List[int]) -> int:
        ...
  out: |
    main:11: error: Instance "builtins.list[builtins.int]" does not match inferred type "builtins.list[builtins.int*]"
    main:11: error: Only a single argument can be applied to `.instance`
    main:11: error: Regular type "builtins.str*" passed as a protocol
