- case: typeclass_concrete_generic
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(List[int]):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: List[int]) -> int:
        ...

    some([1, 2, 3])
    some([])
    some(['a'])  # E: List item 0 has incompatible type "str"; expected "int"  [list-item]


- case: typeclass_concrete_generic_annotated_as_delegate
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(List[int]):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: SomeDelegate) -> int:
        ...

    a: SomeDelegate
    some(a)
    some([1, 2, 3])
    some([])
    some(['a'])
  out: |
    main:17: error: Argument 1 to "some" has incompatible type "List[int]"; expected "SomeDelegate"  [arg-type]
    main:18: error: Argument 1 to "some" has incompatible type "List[<nothing>]"; expected "SomeDelegate"  [arg-type]
    main:19: error: Argument 1 to "some" has incompatible type "List[str]"; expected "SomeDelegate"  [arg-type]


- case: typeclass_delegate_not_subtype_correct1
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_list_int(instance: List[int]) -> int:
        ...
  out: |
    main:11: error: Instance "builtins.list[builtins.int]" does not match inferred type "main.SomeDelegate"  [misc]


- case: typeclass_delegate_not_subtype_correct2
  disable_cache: false
  main: |
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(delegate=SomeDelegate)
    def _some_int(instance: int) -> int:
        ...
  out: |
    main:10: error: Instance "builtins.int" does not match inferred type "main.SomeDelegate"  [misc]


- case: typeclass_concrete_generic_supports_delegate
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType
    from typing import List

    class ListOfIntMeta(type):
        def __instancecheck__(cls, arg) -> bool:
            return (
                isinstance(arg, list) and
                bool(arg) and
                all(isinstance(list_item, int) for list_item in arg)
            )

    class ListOfInt(List[int], metaclass=ListOfIntMeta):  # type: ignore[misc]
        ...

    class A(AssociatedType):
        ...

    @typeclass(A)
    def sum_all(instance) -> int:
        ...

    @sum_all.instance(delegate=ListOfInt)
    def _sum_all_list_int(instance: ListOfInt) -> int:
        return sum(instance)

    def test(a: Supports[A]):
        ...

    a: ListOfInt
    b: List[int]
    c: List[str]
    test(a)
    test(b)
    test(c)
  out: |
    main:33: error: Argument 1 to "test" has incompatible type "List[int]"; expected "Supports[A]"  [arg-type]
    main:34: error: Argument 1 to "test" has incompatible type "List[str]"; expected "Supports[A]"  [arg-type]


- case: typeclass_concrete_generic_supports_instance
  disable_cache: false
  main: |
    from classes import typeclass, Supports, AssociatedType
    from typing import List

    class ListOfIntMeta(type):
        def __instancecheck__(cls, arg) -> bool:
            return (
                isinstance(arg, list) and
                bool(arg) and
                all(isinstance(list_item, int) for list_item in arg)
            )

    class ListOfInt(List[int], metaclass=ListOfIntMeta):  # type: ignore[misc]
        ...

    class A(AssociatedType):
        ...

    @typeclass(A)
    def sum_all(instance) -> int:
        ...

    @sum_all.instance(delegate=ListOfInt)
    def _sum_all_list_int(instance: List[int]) -> int:
        return sum(instance)

    def test(a: Supports[A]):
        ...

    a: ListOfInt
    b: List[int]
    c: List[str]
    test(a)
    test(b)
    test(c)
  out: |
    main:33: error: Argument 1 to "test" has incompatible type "List[int]"; expected "Supports[A]"  [arg-type]
    main:34: error: Argument 1 to "test" has incompatible type "List[str]"; expected "Supports[A]"  [arg-type]


- case: typeclass_concrete_generic_delegate_and_protocol
  disable_cache: false
  main: |
    from typing import List
    from classes import typeclass

    class SomeDelegate(object):
        ...

    @typeclass
    def some(instance) -> int:
        ...

    @some.instance(List[int], delegate=SomeDelegate, protocol=str)
    def _some_list_int(instance: List[int]) -> int:
        ...
  out: |
    main:11: error: Instance "builtins.list[builtins.int]" does not match inferred type "main.SomeDelegate"  [misc]
    main:11: error: Regular type "builtins.str" passed as a protocol  [misc]
    main:11: error: Only a single argument can be applied to `.instance`  [misc]


- case: typeclass_concrete_generic_delegate_and_tuple1
  disable_cache: false
  main: |
    from typing import Tuple
    from classes import typeclass

    class UserTupleMeta(type):
        def __instancecheck__(cls, arg: object) -> bool:
            try:
                return (
                    isinstance(arg, tuple) and
                    isinstance(arg[0], str) and
                    isinstance(arg[1], bool)
                )
            except IndexError:
                return False

    class UserTuple(Tuple[str, bool], metaclass=UserTupleMeta):  # type: ignore[misc]
        ...

    @typeclass
    def get_name(instance) -> str:
        ...

    @get_name.instance(delegate=UserTuple)
    def _get_name_user_dict(instance: Tuple[str, bool]) -> str:
        return instance[0]


    get_name(('a', True))  # ok

    get_name(())
    get_name(('a', 'b', 'c'))
    get_name(('a', 1))
  out: |
    main:29: error: Argument 1 to "get_name" has incompatible type "Tuple[]"; expected "Tuple[str, bool]"  [arg-type]
    main:30: error: Argument 1 to "get_name" has incompatible type "Tuple[str, str, str]"; expected "Tuple[str, bool]"  [arg-type]
    main:31: error: Argument 1 to "get_name" has incompatible type "Tuple[str, int]"; expected "Tuple[str, bool]"  [arg-type]


- case: typeclass_concrete_generic_delegate_and_tuple2
  disable_cache: false
  main: |
    from typing import Tuple
    from classes import typeclass

    class UserTupleMeta(type):
        def __instancecheck__(cls, arg: object) -> bool:
            try:
                return (
                    isinstance(arg, tuple) and
                    isinstance(arg[0], str) and
                    isinstance(arg[1], bool)
                )
            except IndexError:
                return False

    class UserTuple(Tuple[str, bool], metaclass=UserTupleMeta):  # type: ignore[misc]
        ...

    @typeclass
    def get_name(instance) -> str:
        ...

    @get_name.instance(delegate=UserTuple)
    def _get_name_user_dict(instance: UserTuple) -> str:
        return instance[0]


    a = UserTuple(('a', True))
    get_name(a)

    get_name(())
    get_name(('a', 'b'))
    get_name(('a', True))
    get_name(('a', 'b', 'c'))
  out: |
    main:30: error: Argument 1 to "get_name" has incompatible type "Tuple[]"; expected "UserTuple"  [arg-type]
    main:31: error: Argument 1 to "get_name" has incompatible type "Tuple[str, str]"; expected "UserTuple"  [arg-type]
    main:32: error: Argument 1 to "get_name" has incompatible type "Tuple[str, bool]"; expected "UserTuple"  [arg-type]
    main:33: error: Argument 1 to "get_name" has incompatible type "Tuple[str, str, str]"; expected "UserTuple"  [arg-type]
