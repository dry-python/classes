- case: typeclass_with_ellipsis
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def args(instance) -> str:
        ...


- case: typeclass_with_docstring
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def args(instance) -> str:
        """Some."""


- case: typeclass_with_body
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def args(instance) -> str:
        return 'a'
  out: |
     main:3: error: Typeclass definitions must not have bodies  [misc]


- case: typeclass_with_pass_body
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def sum_all(instance) -> int:
        pass


- case: typeclass_with_body_and_associated_type
  disable_cache: false
  main: |
    from classes import typeclass, AssociatedType

    class Some(AssociatedType):
        ...

    @typeclass(Some)
    def args(instance) -> str:
        return 'a'
  out: |
     main:6: error: Typeclass definitions must not have bodies  [misc]


- case: typeclass_with_two_ellipsises
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def args(instance) -> str:
        ...
        ...
  out: |
     main:3: error: Typeclass definitions must not have bodies  [misc]
     main:4: error: Missing return statement  [return]
