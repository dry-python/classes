- case: typeclass_two_typeclasses_two_instances
  disable_cache: false
  main: |
    from typing import Union
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @typeclass
    def b(instance) -> str:
      ...

    @a.instance(str)
    def _a_str(instance: str) -> str:
        ...

    @b.instance(int)
    def _b_int(instance: int) -> str:
        ...

    a('a')
    b(2)

    a(1)
    b('b')
  out: |
    main:23: error: Argument 1 to "a" has incompatible type "int"; expected "str"
    main:24: error: Argument 1 to "b" has incompatible type "str"; expected "int"


- case: typeclass_two_typeclasses_one_instance
  disable_cache: false
  main: |
    from typing import Union
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @typeclass
    def b(instance) -> str:
      ...

    @a.instance(str)
    @b.instance(int)
    def _a_int_str(instance: Union[str, int]) -> str:
        return str(instance)

    a('a')
    b(2)

    a(1)
    b('b')
  out: |
    main:20: error: Argument 1 to "a" has incompatible type "int"; expected "str"
    main:21: error: Argument 1 to "b" has incompatible type "str"; expected "int"


- case: typeclass_instances_union1
  disable_cache: false
  main: |
    from typing import Union
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(str)
    @a.instance(int)
    def _a_int_str(instance: Union[str, int]) -> str:
        return str(instance)

    a(1)
    a('a')
    a(None) # E: Argument 1 to "a" has incompatible type "None"; expected "Union[str, int]"


- case: typeclass_instances_union2
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(str)
    @a.instance(int)
    def _a_int_str(instance: int) -> str:
        ...
  out: |
    main:7: error: Instance "builtins.int" does not match runtime type "Union[builtins.str*, builtins.int*]"


- case: typeclass_instances_union3
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(str)
    @a.instance(int)
    def _a_int_str(instance: str) -> str:
        ...
  out: |
    main:7: error: Instance "builtins.str" does not match runtime type "Union[builtins.str*, builtins.int*]"


- case: typeclass_instances_union4
  disable_cache: false
  main: |
    from typing import Union
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(str)
    @a.instance(int)
    def _a_int_str(instance: Union[str, int, None]) -> str:
        ...
  out: |
    main:8: error: Instance "Union[builtins.str, builtins.int, None]" does not match runtime type "Union[builtins.str*, builtins.int*]"


- case: typeclass_instance_mixed_order
  disable_cache: False
  main: |
    from classes import typeclass

    @typeclass
    def some(instance) -> str:
        ...

    @some.instance(int)
    def _some_str(instance: str) -> str:
        ...

    @some.instance(int)
    def _some_int(instance: str) -> str:
        ...
  out: |
    main:7: error: Instance "builtins.str" does not match runtime type "builtins.int*"
    main:11: error: Instance "builtins.str" does not match runtime type "builtins.int*"


- case: typeclass_instance_any1
  disable_cache: false
  mypy_config: |
    disallow_any_explicit = false
    disallow_any_generics = false
  main: |
    from typing import Any
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(int)
    def _a_int(instance: Any) -> str:
        ...
  out: |
    main:8: error: Instance "Any" does not match runtime type "builtins.int*"


- case: typeclass_instance_any2
  disable_cache: false
  mypy_config: |
    disallow_any_explicit = false
    disallow_any_generics = false
  main: |
    from typing import Any
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(Any)
    def _a_any(instance: Any) -> str:
        ...
  out: |
    main:8: error: Instance "Any" does not match runtime type "builtins.object"
    main:8: error: Value of type variable "_NewInstanceType" of "instance" of "_TypeClass" cannot be "object"


- case: typeclass_instance_wrong_param
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    a.instance(1)  # E: Value of type variable "_NewInstanceType" of "instance" of "_TypeClass" cannot be "int"


- case: typeclass_instance_callback_def
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def some(instance, b: int) -> int:
        ...

    def _some_str(instance: str, b: int) -> int:
        ...
    some.instance(str)(_some_str)

    some('a', 1)
    some(None, 1)  # E: Argument 1 to "some" has incompatible type "None"; expected "str"


- case: typeclass_instance_named_alias
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def some(instance, b: int) -> int:
        ...

    alias = some.instance(str)  # E: Need type annotation for 'alias'
