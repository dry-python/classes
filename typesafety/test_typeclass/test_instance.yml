- case: typeclass_instances_union
  disable_cache: false
  main: |
    from typing import Union
    from classes import typeclass

    @typeclass
    def a(instance) -> str:
        ...

    @a.instance(str)
    @a.instance(int)
    def _a_int_str(instance: Union[str, int]) -> str:
        return str(instance)

    reveal_type(a)  # N: Revealed type is 'classes.typeclass._TypeClass[Union[builtins.str*, builtins.int*], builtins.str, def (builtins.str*) -> builtins.str]'


- case: typeclass_instance_any
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance):
        ...

    @a.instance(str)
    def _a_int_str(instance: str) -> str:
        return str(instance)

    reveal_type(a)  # N: Revealed type is 'classes.typeclass._TypeClass[builtins.str*, Any, def (builtins.str*) -> Any]'


- case: typeclass_instance_missing_first_arg
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance):
        ...

    @a.instance
    def some():
        ...

  out: |
    main:7: error: No overload variant of "instance" of "_TypeClass" matches argument type "Callable[[], Any]"
    main:7: note:     <1 more non-matching overload not shown>
    main:7: note:     def [_InstanceType] instance(self, type_argument: Type[_InstanceType], *, is_protocol: Literal[False] = ...) -> Callable[[Callable[[_InstanceType], Any]], NoReturn]
    main:7: note: Possible overload variant:


- case: typeclass_wrong_param
  disable_cache: false
  main: |
    from classes import typeclass

    typeclass(1)

  out: |
    main:3: error: Value of type variable "_CallbackType" of "typeclass" cannot be "int"


- case: typeclass_instance_wrong_param
  disable_cache: false
  main: |
    from classes import typeclass

    @typeclass
    def a(instance):
        ...

    a.instance(1)

  out: |
    main:7: error: No overload variant of "instance" of "_TypeClass" matches argument type "int"
    main:7: note:     <1 more non-matching overload not shown>
    main:7: note:     def [_InstanceType] instance(self, type_argument: Type[_InstanceType], *, is_protocol: Literal[False] = ...) -> Callable[[Callable[[_InstanceType], Any]], NoReturn]
    main:7: note: Possible overload variant:
