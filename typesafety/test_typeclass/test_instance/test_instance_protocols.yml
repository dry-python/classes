- case: typeclass_protocol_usage
  disable_cache: false
  main: |
    from typing import Sized
    from classes import typeclass

    @typeclass
    def protocols(instance, other: str) -> str:
        ...

    @protocols.instance(protocol=Sized)
    def _sized_protocols(instance: Sized, other: str) -> str:
        ...

    protocols('abc', 'xyz')
    protocols([1, 2, 3], 'xyz')
    protocols(None, 'xyz')  # E: Argument 1 to "protocols" has incompatible type "None"; expected "Sized"  [arg-type]


- case: typeclass_protocol_wrong_usage0
  disable_cache: false
  main: |
    from typing import Sized
    from classes import typeclass

    @typeclass
    def protocols(instance, other: str) -> str:
        ...

    @protocols.instance(Sized)
    def _sized_protocols(instance: Sized, other: str) -> str:
        ...
  out: |
    main:8: error: Protocol type "typing.Sized" is passed as a regular type  [misc]


- case: typeclass_protocol_wrong_usage1
  disable_cache: false
  main: |
    from typing import Sized
    from classes import typeclass

    @typeclass
    def protocols(instance, other: str) -> str:
        ...

    @protocols.instance(protocol=int)
    def _sized_protocols(instance: int, other: str) -> str:
        ...
  out: |
    main:8: error: Regular type "builtins.int" passed as a protocol  [misc]
