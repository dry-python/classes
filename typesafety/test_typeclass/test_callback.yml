- case: typeclass_callback_correct
  disable_cache: false
  main: |
    from typing import Callable
    from classes import typeclass

    @typeclass
    def example(instance, attr: bool) -> bool:
        ...

    @example.instance(int)
    @example.instance(float)
    def _example_int_float(instance, attr: bool) -> bool:
        ...


    def accepts_typeclass(callback: Callable[[int, bool], bool]) -> bool:
        return callback(1, True)

    reveal_type(accepts_typeclass(example))  # N: Revealed type is 'builtins.bool'


- case: typeclass_callback_wrong
  disable_cache: false
  main: |
    from typing import Callable
    from classes import typeclass

    @typeclass
    def example(instance, attr: bool) -> bool:
        ...

    @example.instance(int)
    @example.instance(float)
    def _example_int_float(instance, attr: bool) -> bool:
        ...

    def accepts_typeclass(callback: Callable[[str, bool], bool]) -> bool:
        return callback('a', True)

    reveal_type(accepts_typeclass(example))
  out: |
    main:16: error: Argument 1 to "accepts_typeclass" has incompatible type "_TypeClass[Union[int, float], bool, Callable[[int, bool], bool], <nothing>]"; expected "Callable[[str, bool], bool]"
    main:16: note: "_TypeClass[Union[int, float], bool, Callable[[int, bool], bool], <nothing>].__call__" has type "Callable[[Arg(Supports[<nothing>], 'instance'), VarArg(Any), KwArg(Any)], bool]"
    main:16: note: Revealed type is 'builtins.bool'
