- case: typeclass_protocol_instance_wrong
  disable_cache: false
  main: |
    from classes import typeclass
    from typing_extensions import Protocol

    class ToJson(Protocol):
        def __call__(self, instance: str, verbose: bool = False) -> str:
            ...

    to_json = typeclass(ToJson)
  out: |
    main:8: error: Typeclass instance must be of `Any` type


- case: typeclass_protocol_any_explicit
  disable_cache: false
  main: |
    from classes import typeclass
    from typing import Any
    from typing_extensions import Protocol

    class ToJson(Protocol):
        def __call__(self, instance: Any, verbose: bool = False) -> str:
            ...

    to_json = typeclass(ToJson)
  out: |
    main:6: error: Explicit "Any" is not allowed
    main:9: error: Typeclass instance must not be annotated
